export default class Swift5ParserVisitor {
    visitTop_level(ctx: any): any;
    visitStatement(ctx: any): any;
    visitStatements(ctx: any): any;
    visitLoop_statement(ctx: any): any;
    visitFor_in_statement(ctx: any): any;
    visitWhile_statement(ctx: any): any;
    visitCondition_list(ctx: any): any;
    visitCondition(ctx: any): any;
    visitCase_condition(ctx: any): any;
    visitOptional_binding_condition(ctx: any): any;
    visitRepeat_while_statement(ctx: any): any;
    visitBranch_statement(ctx: any): any;
    visitIf_statement(ctx: any): any;
    visitElse_clause(ctx: any): any;
    visitGuard_statement(ctx: any): any;
    visitSwitch_statement(ctx: any): any;
    visitSwitch_cases(ctx: any): any;
    visitSwitch_case(ctx: any): any;
    visitCase_label(ctx: any): any;
    visitCase_item_list(ctx: any): any;
    visitDefault_label(ctx: any): any;
    visitWhere_clause(ctx: any): any;
    visitWhere_expression(ctx: any): any;
    visitConditional_switch_case(ctx: any): any;
    visitSwitch_if_directive_clause(ctx: any): any;
    visitSwitch_elseif_directive_clauses(ctx: any): any;
    visitSwitch_elseif_directive_clause(ctx: any): any;
    visitSwitch_else_directive_clause(ctx: any): any;
    visitLabeled_statement(ctx: any): any;
    visitStatement_label(ctx: any): any;
    visitLabel_name(ctx: any): any;
    visitControl_transfer_statement(ctx: any): any;
    visitBreak_statement(ctx: any): any;
    visitContinue_statement(ctx: any): any;
    visitFallthrough_statement(ctx: any): any;
    visitReturn_statement(ctx: any): any;
    visitThrow_statement(ctx: any): any;
    visitDefer_statement(ctx: any): any;
    visitDo_statement(ctx: any): any;
    visitCatch_clauses(ctx: any): any;
    visitCatch_clause(ctx: any): any;
    visitCatch_pattern_list(ctx: any): any;
    visitCatch_pattern(ctx: any): any;
    visitCompiler_control_statement(ctx: any): any;
    visitConditional_compilation_block(ctx: any): any;
    visitIf_directive_clause(ctx: any): any;
    visitElseif_directive_clauses(ctx: any): any;
    visitElseif_directive_clause(ctx: any): any;
    visitElse_directive_clause(ctx: any): any;
    visitCompilation_condition(ctx: any): any;
    visitPlatform_condition(ctx: any): any;
    visitSwift_version(ctx: any): any;
    visitSwift_version_continuation(ctx: any): any;
    visitOperating_system(ctx: any): any;
    visitArchitecture(ctx: any): any;
    visitModule_name(ctx: any): any;
    visitEnvironment(ctx: any): any;
    visitLine_control_statement(ctx: any): any;
    visitLine_number(ctx: any): any;
    visitFile_name(ctx: any): any;
    visitDiagnostic_statement(ctx: any): any;
    visitDiagnostic_message(ctx: any): any;
    visitAvailability_condition(ctx: any): any;
    visitAvailability_arguments(ctx: any): any;
    visitAvailability_argument(ctx: any): any;
    visitPlatform_name(ctx: any): any;
    visitPlatform_version(ctx: any): any;
    visitGeneric_parameter_clause(ctx: any): any;
    visitGeneric_parameter_list(ctx: any): any;
    visitGeneric_parameter(ctx: any): any;
    visitGeneric_where_clause(ctx: any): any;
    visitRequirement_list(ctx: any): any;
    visitRequirement(ctx: any): any;
    visitConformance_requirement(ctx: any): any;
    visitSame_type_requirement(ctx: any): any;
    visitGeneric_argument_clause(ctx: any): any;
    visitGeneric_argument_list(ctx: any): any;
    visitGeneric_argument(ctx: any): any;
    visitDeclaration(ctx: any): any;
    visitDeclarations(ctx: any): any;
    visitTop_level_declaration(ctx: any): any;
    visitCode_block(ctx: any): any;
    visitImport_declaration(ctx: any): any;
    visitImport_kind(ctx: any): any;
    visitImport_path(ctx: any): any;
    visitImport_path_identifier(ctx: any): any;
    visitConstant_declaration(ctx: any): any;
    visitPattern_initializer_list(ctx: any): any;
    visitPattern_initializer(ctx: any): any;
    visitInitializer(ctx: any): any;
    visitVariable_declaration(ctx: any): any;
    visitVariable_declaration_head(ctx: any): any;
    visitVariable_name(ctx: any): any;
    visitGetter_setter_block(ctx: any): any;
    visitGetter_clause(ctx: any): any;
    visitSetter_clause(ctx: any): any;
    visitSetter_name(ctx: any): any;
    visitGetter_setter_keyword_block(ctx: any): any;
    visitGetter_keyword_clause(ctx: any): any;
    visitSetter_keyword_clause(ctx: any): any;
    visitWillSet_didSet_block(ctx: any): any;
    visitWillSet_clause(ctx: any): any;
    visitDidSet_clause(ctx: any): any;
    visitTypealias_declaration(ctx: any): any;
    visitTypealias_name(ctx: any): any;
    visitTypealias_assignment(ctx: any): any;
    visitFunction_declaration(ctx: any): any;
    visitFunction_head(ctx: any): any;
    visitFunction_name(ctx: any): any;
    visitFunction_signature(ctx: any): any;
    visitFunction_result(ctx: any): any;
    visitFunction_body(ctx: any): any;
    visitParameter_clause(ctx: any): any;
    visitParameter_list(ctx: any): any;
    visitParameter(ctx: any): any;
    visitExternal_parameter_name(ctx: any): any;
    visitLocal_parameter_name(ctx: any): any;
    visitDefault_argument_clause(ctx: any): any;
    visitEnum_declaration(ctx: any): any;
    visitUnion_style_enum(ctx: any): any;
    visitUnion_style_enum_members(ctx: any): any;
    visitUnion_style_enum_member(ctx: any): any;
    visitUnion_style_enum_case_clause(ctx: any): any;
    visitUnion_style_enum_case_list(ctx: any): any;
    visitUnion_style_enum_case(ctx: any): any;
    visitEnum_name(ctx: any): any;
    visitEnum_case_name(ctx: any): any;
    visitRaw_value_style_enum(ctx: any): any;
    visitRaw_value_style_enum_members(ctx: any): any;
    visitRaw_value_style_enum_member(ctx: any): any;
    visitRaw_value_style_enum_case_clause(ctx: any): any;
    visitRaw_value_style_enum_case_list(ctx: any): any;
    visitRaw_value_style_enum_case(ctx: any): any;
    visitRaw_value_assignment(ctx: any): any;
    visitRaw_value_literal(ctx: any): any;
    visitStruct_declaration(ctx: any): any;
    visitStruct_name(ctx: any): any;
    visitStruct_body(ctx: any): any;
    visitStruct_members(ctx: any): any;
    visitStruct_member(ctx: any): any;
    visitClass_declaration(ctx: any): any;
    visitClass_name(ctx: any): any;
    visitClass_body(ctx: any): any;
    visitClass_members(ctx: any): any;
    visitClass_member(ctx: any): any;
    visitProtocol_declaration(ctx: any): any;
    visitProtocol_name(ctx: any): any;
    visitProtocol_body(ctx: any): any;
    visitProtocol_members(ctx: any): any;
    visitProtocol_member(ctx: any): any;
    visitProtocol_member_declaration(ctx: any): any;
    visitProtocol_property_declaration(ctx: any): any;
    visitProtocol_method_declaration(ctx: any): any;
    visitProtocol_initializer_declaration(ctx: any): any;
    visitProtocol_subscript_declaration(ctx: any): any;
    visitProtocol_associated_type_declaration(ctx: any): any;
    visitInitializer_declaration(ctx: any): any;
    visitInitializer_head(ctx: any): any;
    visitInitializer_body(ctx: any): any;
    visitDeinitializer_declaration(ctx: any): any;
    visitExtension_declaration(ctx: any): any;
    visitExtension_body(ctx: any): any;
    visitExtension_members(ctx: any): any;
    visitExtension_member(ctx: any): any;
    visitSubscript_declaration(ctx: any): any;
    visitSubscript_head(ctx: any): any;
    visitSubscript_result(ctx: any): any;
    visitOperator_declaration(ctx: any): any;
    visitPrefix_operator_declaration(ctx: any): any;
    visitPostfix_operator_declaration(ctx: any): any;
    visitInfix_operator_declaration(ctx: any): any;
    visitInfix_operator_group(ctx: any): any;
    visitPrecedence_group_declaration(ctx: any): any;
    visitPrecedence_group_attributes(ctx: any): any;
    visitPrecedence_group_attribute(ctx: any): any;
    visitPrecedence_group_relation(ctx: any): any;
    visitPrecedence_group_assignment(ctx: any): any;
    visitPrecedence_group_associativity(ctx: any): any;
    visitPrecedence_group_names(ctx: any): any;
    visitPrecedence_group_name(ctx: any): any;
    visitDeclaration_modifier(ctx: any): any;
    visitDeclaration_modifiers(ctx: any): any;
    visitAccess_level_modifier(ctx: any): any;
    visitMutation_modifier(ctx: any): any;
    visitPattern(ctx: any): any;
    visitWildcard_pattern(ctx: any): any;
    visitIdentifier_pattern(ctx: any): any;
    visitValue_binding_pattern(ctx: any): any;
    visitTuple_pattern(ctx: any): any;
    visitTuple_pattern_element_list(ctx: any): any;
    visitTuple_pattern_element(ctx: any): any;
    visitEnum_case_pattern(ctx: any): any;
    visitOptional_pattern(ctx: any): any;
    visitExpression_pattern(ctx: any): any;
    visitAttribute(ctx: any): any;
    visitAttribute_name(ctx: any): any;
    visitAttribute_argument_clause(ctx: any): any;
    visitAttributes(ctx: any): any;
    visitBalanced_tokens(ctx: any): any;
    visitBalanced_token(ctx: any): any;
    visitBalanced_token_punctuation(ctx: any): any;
    visitExpression(ctx: any): any;
    visitExpression_list(ctx: any): any;
    visitPrefix_expression(ctx: any): any;
    visitIn_out_expression(ctx: any): any;
    visitTry_operator(ctx: any): any;
    visitBinary_expression(ctx: any): any;
    visitBinary_expressions(ctx: any): any;
    visitConditional_operator(ctx: any): any;
    visitType_casting_operator(ctx: any): any;
    visitPrimary_expression(ctx: any): any;
    visitUnqualified_name(ctx: any): any;
    visitLiteral_expression(ctx: any): any;
    visitArray_literal(ctx: any): any;
    visitArray_literal_items(ctx: any): any;
    visitArray_literal_item(ctx: any): any;
    visitDictionary_literal(ctx: any): any;
    visitDictionary_literal_items(ctx: any): any;
    visitDictionary_literal_item(ctx: any): any;
    visitPlayground_literal(ctx: any): any;
    visitSelf_pure_expression(ctx: any): any;
    visitSelf_method_expression(ctx: any): any;
    visitSelf_subscript_expression(ctx: any): any;
    visitSelf_initializer_expression(ctx: any): any;
    visitSuperclass_method_expression(ctx: any): any;
    visitSuperclass_subscript_expression(ctx: any): any;
    visitSuperclass_initializer_expression(ctx: any): any;
    visitClosure_expression(ctx: any): any;
    visitClosure_signature(ctx: any): any;
    visitClosure_parameter_clause(ctx: any): any;
    visitClosure_parameter_list(ctx: any): any;
    visitClosure_parameter(ctx: any): any;
    visitCapture_list(ctx: any): any;
    visitCapture_list_items(ctx: any): any;
    visitCapture_list_item(ctx: any): any;
    visitCapture_specifier(ctx: any): any;
    visitImplicit_member_expression(ctx: any): any;
    visitParenthesized_operator(ctx: any): any;
    visitParenthesized_expression(ctx: any): any;
    visitTuple_expression(ctx: any): any;
    visitTuple_element_list(ctx: any): any;
    visitTuple_element(ctx: any): any;
    visitWildcard_expression(ctx: any): any;
    visitKey_path_expression(ctx: any): any;
    visitKey_path_components(ctx: any): any;
    visitKey_path_component(ctx: any): any;
    visitKey_path_postfixes(ctx: any): any;
    visitKey_path_postfix(ctx: any): any;
    visitSelector_expression(ctx: any): any;
    visitKey_path_string_expression(ctx: any): any;
    visitPostfix_expression(ctx: any): any;
    visitFunction_call_suffix(ctx: any): any;
    visitInitializer_suffix(ctx: any): any;
    visitExplicit_member_suffix(ctx: any): any;
    visitPostfix_self_suffix(ctx: any): any;
    visitSubscript_suffix(ctx: any): any;
    visitForced_value_suffix(ctx: any): any;
    visitOptional_chaining_suffix(ctx: any): any;
    visitFunction_call_argument_clause(ctx: any): any;
    visitFunction_call_argument_list(ctx: any): any;
    visitFunction_call_argument(ctx: any): any;
    visitTrailing_closures(ctx: any): any;
    visitLabeled_trailing_closures(ctx: any): any;
    visitLabeled_trailing_closure(ctx: any): any;
    visitArgument_names(ctx: any): any;
    visitArgument_name(ctx: any): any;
    visitType(ctx: any): any;
    visitType_annotation(ctx: any): any;
    visitType_identifier(ctx: any): any;
    visitType_name(ctx: any): any;
    visitTuple_type(ctx: any): any;
    visitTuple_type_element_list(ctx: any): any;
    visitTuple_type_element(ctx: any): any;
    visitElement_name(ctx: any): any;
    visitFunction_type(ctx: any): any;
    visitFunction_type_argument_clause(ctx: any): any;
    visitFunction_type_argument_list(ctx: any): any;
    visitFunction_type_argument(ctx: any): any;
    visitArgument_label(ctx: any): any;
    visitArray_type(ctx: any): any;
    visitDictionary_type(ctx: any): any;
    visitProtocol_composition_type(ctx: any): any;
    visitTrailing_composition_and(ctx: any): any;
    visitOpaque_type(ctx: any): any;
    visitAny_type(ctx: any): any;
    visitSelf_type(ctx: any): any;
    visitType_inheritance_clause(ctx: any): any;
    visitType_inheritance_list(ctx: any): any;
    visitIdentifier(ctx: any): any;
    visitIdentifier_list(ctx: any): any;
    visitKeyword(ctx: any): any;
    visitAssignment_operator(ctx: any): any;
    visitNegate_prefix_operator(ctx: any): any;
    visitCompilation_condition_AND(ctx: any): any;
    visitCompilation_condition_OR(ctx: any): any;
    visitCompilation_condition_GE(ctx: any): any;
    visitCompilation_condition_L(ctx: any): any;
    visitArrow_operator(ctx: any): any;
    visitRange_operator(ctx: any): any;
    visitSame_type_equals(ctx: any): any;
    visitBinary_operator(ctx: any): any;
    visitPrefix_operator(ctx: any): any;
    visitPostfix_operator(ctx: any): any;
    visitOperator(ctx: any): any;
    visitOperator_head(ctx: any): any;
    visitOperator_character(ctx: any): any;
    visitOperator_characters(ctx: any): any;
    visitDot_operator_head(ctx: any): any;
    visitDot_operator_character(ctx: any): any;
    visitDot_operator_characters(ctx: any): any;
    visitLiteral(ctx: any): any;
    visitNumeric_literal(ctx: any): any;
    visitBoolean_literal(ctx: any): any;
    visitNil_literal(ctx: any): any;
    visitInteger_literal(ctx: any): any;
    visitString_literal(ctx: any): any;
    visitExtended_string_literal(ctx: any): any;
    visitStatic_string_literal(ctx: any): any;
    visitInterpolated_string_literal(ctx: any): any;
}
